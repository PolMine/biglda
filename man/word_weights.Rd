% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fileops.R
\name{mallet_load_word_weights}
\alias{mallet_load_word_weights}
\alias{mallet_save_word_weights}
\title{Process large topic word weights matrices}
\usage{
mallet_load_word_weights(filename)

mallet_save_word_weights(model, destfile = tempfile())
}
\arguments{
\item{filename}{A file with word weights.}

\item{model}{A topic model (class \code{jobjRef}).}

\item{destfile}{Length-one \code{character} vector, the filename of the
output file.}
}
\description{
The word weights matrix (weights of words for topics) can get big dataish when 
there is a large number of topics and a substantially sized vocabulary. The 
\code{mallet_save_word_weights} and the \code{mallet_load_word_weights} are 
tools to handle this scenario by writing out the data to disk as a sparse matrix, 
and loading this into the R session. In order to be able to use the function,
the \code{ParallelTopicModel} class needs to be used, the \code{RTopicModel} will
not do it.
}
\details{
The function \code{mallet_save_word_weights} will write a file that
  can be handled as a sparse matrix to a file (argument \code{destfile}).
  Internally, it uses the method \code{printTopicWordWeights} of the
  \code{ParallelTopicModel} class. The (parsed) content of the file is
  equivalent to matrix that can be obtained directly the class using the
  \code{getTopicWords(FALSE, TRUE)} method. Thus, values are not normalised,
  but smoothed (= coefficient beta is added to values).
}
\examples{
\dontrun{
polmineR::use("polmineR")
speeches <- polmineR::as.speeches(
  "GERMAPARLMINI",
  s_attribute_name = "speaker",
  s_attribute_date = "date"
)

library(rJava)
.jinit()
.jaddClassPath("/opt/mallet-2.0.8/class") # after .jinit(), not before
.jaddClassPath("/opt/mallet-2.0.8/lib/mallet-deps.jar")


# This is the call used internally by 'as_LDA()'. The difference
# is that the arguments of the $getTopicWords()-method are FALSE 
# (argument 'normalized') and TRUE (argument 'smoothed')
beta_1 <- rJava::.jevalArray(lda$getTopicWords(FALSE, TRUE), simplify = TRUE) 
alphabet <- strsplit(lda$getAlphabet()$toString(), "\n")[[1]]
colnames(beta_1) <- alphabet
beta_1 <- beta_1[, alphabet[order(alphabet)] ]
rownames(beta_1) <- as.character(1:nrow(beta_1))

# This is an approach that uses a (temporary) file written
# to disk. The advantage is that it is a sparse matrix that is
# passed
fname <- mallet_save_word_weights(lda)
word_weights <- mallet_load_word_weights(fname)
beta_2 <- t(as.matrix(word_weights))

# Demonstrate the equivalence of the two approaches
identical(rownames(beta_1), rownames(beta_2))
identical(colnames(beta_1), colnames(beta_2))
identical(apply(beta_1, 1, order), apply(beta_2, 1, order))
identical(beta_1, beta_2)
}
}
