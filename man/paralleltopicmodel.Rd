% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/biglda.R
\name{BigTopicModel}
\alias{BigTopicModel}
\alias{mallet_load_topicmodel}
\alias{ParallelTopicModel}
\title{Instantiate and load mallet topicmodel}
\usage{
BigTopicModel(n_topics = 25L, alpha_sum = 5.1, beta = 0.1)

mallet_load_topicmodel(filename, verbose = TRUE)

ParallelTopicModel(n_topics = 25L, alpha_sum = 5.1, beta = 0.1)
}
\arguments{
\item{n_topics}{Number of topics (single `integer` value).}

\item{alpha_sum}{Passed into constructor.}

\item{beta}{Passet into constructor.}

\item{filename}{Either a `character` vector containing the path of a mallet 
topic model (ParallelTopicModel), tilde expansion will be appied. Or a 
Java file object.}

\item{verbose}{A `logical` value, whether to output progress messages.}
}
\description{
Instantiate and load mallet topicmodel
}
\details{
The `BigTopicModel` function will instantiate a Java class object
  `BigTopicModel` which inherits from the `RTopicModel` and the
  `ParallelTopicModel` class. It adds a method `$getDocLengthCounts()` to the
  the classes it inherits from to provide a fast access to document lengths.

The function `mallet_load_topicmodel()` will load a topic model
  created using mallet into a `BigTopicModel` object.

The `ParallelTopicModel()` function will instantial a Java class
  object with the same name from the mallet package, see the
  \href{http://mallet.cs.umass.edu/api/cc/mallet/topics/ParallelTopicModel.html}{mallet
  documentation} of the class.
}
\examples{
fname <- system.file(package = "biglda", "extdata", "mallet", "lda_mallet.bin")
bigmodel <- mallet_load_topicmodel(fname)
bigmodel$getDocLengthCounts()
pta <- ParallelTopicModel()
destfile <- tempfile()
pta$write(rJava::.jnew("java/io/File", destfile))
pta_reloaded <- mallet_load_topicmodel(destfile)

binfile <- system.file(
  package = "biglda", "extdata", "mallet",
  "lda_mallet.bin"
)
bin <- mallet_load_topicmodel(binfile)
}
