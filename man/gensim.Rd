% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gensim.R
\name{gensim_ldamodel_as_LDA_Gibbs}
\alias{gensim_ldamodel_as_LDA_Gibbs}
\alias{gensim_ldamodel_load}
\alias{dtm_as_bow}
\title{Utilities to interface to gensim.}
\usage{
gensim_ldamodel_as_LDA_Gibbs(model, dtm)

gensim_ldamodel_load(modeldir, modelname)

dtm_as_bow(dtm)
}
\arguments{
\item{model}{An LDA model trained by gensim.}

\item{dtm}{A Document-Term-Matrix (will be turned into BOW data structure).}

\item{modeldir}{Directory where a gensim LDA topic model has been saved.}

\item{modelname}{Name of a gensim LDA topic model. The data for a model
consists of a set of files starting with the modelname each.}
}
\description{
Utilities to interface to gensim.
}
\details{
`gensim_ldamodel_as_LDA_Gibbs()`-function turns a
  gensim/Python model (that may have been loaded using
  `gensim_ldamodel_load()`) into the class `LDA_Gibbs` well-known
  from the `topicmodels` package for further processing within R.

Use `gensim_ldamodel_load()` to load an ldamodel computed by gensim.
  The return value is a `LdaModel` Python object that can serve as input to
  functions or that can be processed using the `reticulate` package.

The input to gensim's LDA modelling methods is a representation of
  corpora in a data format denoted as "BOW". This utility function
  `dtm_as_bow()` turns a sparse matrix (class `simple_triplet_matrix`) into
  the bow input format required by gensim.
}
\examples{
if (requireNamespace("reticulate") && reticulate::py_module_available("gensim")){
  gensim <- reticulate::import("gensim")
  
  dir <- system.file(package = "biglda", "extdata", "gensim")
  dtmfile <- file.path(dir, "germaparlmini_dtm.rds")
  
  lda <- gensim_ldamodel_load(modeldir = dir, modelname = "germaparlmini") |>
    gensim_ldamodel_as_LDA_Gibbs(dtm = readRDS(dtmfile))
    
  topics_terms <- topicmodels::get_terms(lda, 10)
  docs_topics <- topicmodels::get_topics(lda, 5)
}
library(polmineR)
library(slam)
library(reticulate)
gensim <- import("gensim")
use("RcppCWB")

bow <- corpus("REUTERS") \%>\%
  split(s_attribute = "id") \%>\%
  as.DocumentTermMatrix(p_attribute = "word", verbose = FALSE) \%>\%
  dtm_as_bow()
}
\author{
Andreas Blaette
}
